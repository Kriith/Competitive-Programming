for interactive qs : use cout<<flush after every cout

Some properties of bitwise operations:

    a|b = a⊕b + a&b
    a⊕(a&b) = (a|b)⊕b
    b⊕(a&b) = (a|b)⊕a
    (a&b)⊕(a|b) = a⊕b

Addition:

    a+b = a|b + a&b
    a+b = a⊕b + 2(a&b)

Subtraction:

    a-b = (a⊕(a&b))-((a|b)⊕a)
    a-b = ((a|b)⊕b)-((a|b)⊕a)
    a-b = (a⊕(a&b))-(b⊕(a&b))
    a-b = ((a|b)⊕b)-(b⊕(a&b))

binary exponentation algorithm : 
ll binpow(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

quicksort : 
partition function when pivot is randomized -
    - swap pivot posn with first element for ease
    - have two pointer left and right
    - inc left until you find an element greater than pivot
    - dec right until you find an element smaller than pivot
    - exchange them and continue this
    - stop when right < left
    - position of pivot is at index of right
code for partition : 
        auto partition = [&](int left, int right)->int{
                int pivot = nums[right], index = left - 1;
                for(int i = left; i < right; i++){
                    if(nums[i] < pivot){
                        index++;
                        swap(nums[i], nums[index]);
                    }
                }
                index++;
                swap(nums[index], nums[right]);
                return index;
            };
pseudocode for quicksort : 
quicksort(l, r){
    if(l < r){
        int p = rand()%(r - l + 1) + l;
        swap(p, r);
        m = part(l, r)
        quicksort(l, m)
        quicksort(m+1, r)
    }
}

msb of a number : 1<<(31 - __builtin_clz(n)) 
__builtin_clz counts number of leading zeros

custom comparator for sort, or priority queue
struct cmp{
    bool operator()(pair<int, int> p1, pair<int, int> p2){
        if(p1.second == p2.second) return p1.first < p2.first;
        return p1.second > p2.second;
    }
};
logic : p1.second > p2.second makes the priority queue a min heap priority queue, i.e top element is min
normal priority queue is max heap
for typical min heap priority queue use greater<int> as comparator

dp : recursive soln mostly use top down, iterative uses bottom up
pull dp : "pull" ans from prev dp soln
push dp : "push" ans to next dp soln
recursive can only be pull dp
order of iteration doesn't matter in recursive as we compute the ans we want
it matters in an iterative pull dp 
solving approach : solve it brute force/recursively, break it into bits
states are the variables used in the dp/recursive function
you have to store the states, so a 2d dp has 2 states
transition is the dp/recursive function that finds a value using diff states
if recursive soln is not obv : pull the state/transitions out of problem statement
every 2d dp problem can be thought of as a grid problem, easier to visualize

neat trick to find 4-adjacent elements using a loop :
int df[] = {0, 1, 0, -1, 0}
int nx = x + df[i], ny = y + df[i+1] 
loop from i = 0 to i = 3;

set operations : find : s.find(key), for(auto i : s) cout<<i<<endl;

finding prime numbers till n : 
1-
void init(int n) {
    for (int i = 2; i <= n; i++) p[i] = 1;
    for (int i = 2; i <= n; i++)
        if (p[i])
            for (int j = i + i; j <= n; j += i)
                p[j] = 0;
}
2 - 
bitset<SIZE> p;
void pre() {
    for (int i = 2; i < SIZE; i++) {
        if (!p[i]) {
            for (int j = i + i; j < SIZE; j += i) p[j] = 1;
        }
    }
    p[1] = 1;
}

struct dsu{
    int n;
    vi p;
    vi rank;

    dsu(int n){
        this.n = n;
        p.resize(n+1, 0);
        lopp(i, n+1) p[i] = i;
        rank.resize(n+1, 0);
    }

    int find(int x){
        if(p[x] != x) p[x] = find(p[x]);
        return p[x];
    }

    void merge(int x, int y){
        x = find(x);
        y = find(y);
        if(x == y) return;
        if(rank[x] > rank[y])
            p[y] = x, rank[x]++;
        else p[x] = y, rank[y]++;
    }
};

struct dsu {
    // When data[x] < 0, x is a root and -data[x] is its tree size. When data[x] >= 0, data[x] is x's parent.
    vector<int> data;
    int components = 0;
    //default arg -1
    dsu(int n = -1) {
        if (n >= 0)
            init(n);
    }
 
    void init(int n) {
        data.assign(n + 1, -1);
        components = n;
    }
 
    int find(int x) {
        return data[x] < 0 ? x : data[x] = find(data[x]);
    }
 
    int get_size(int x) {
        return -data[find(x)];
    }
 
    bool merge(int x, int y) {
        x = find(x);
        y = find(y);
 
        if (x == y)
            return false;
 
        if (-data[x] < -data[y])
            swap(x, y);
 
        data[x] += data[y];
        data[y] = x;
        components--;
        return true;
    }
};

auto bfs = [&](int t)->bool{
    queue<pair<int, int>> q;
    q.push({0, 0});
    int df[] = {0, -1, 0, 1, 0}; //when traversing 4 adj 
    vector<vector<bool>> marked(n, vector<bool>(n, 0));
    while(!q.empty()){
        int x = q.front().first, y = q.front().second;
        for(int i = 0; i < 4; i++){
            int nx = x + df[i], ny = y + df[i+1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= n || marked[nx][ny]) continue;
            if(grid[nx][ny] <= t){ //condition change acc to ques
                q.push({nx, ny});
                marked[nx][ny] = 1;
            }
        }
        q.pop();
    }
    return marked[n-1][n-1];
};

djikstra's algorithm implementation using set : 
doesn't require visited array
vector<int> dist(n, INT_MAX);
dist[src] = 0;
set<pair<int, int>> s;
s.insert({0, src});
while(!s.empty()){
    int x = (*s.begin()).first;
    s.erase(s.begin());         //if you give address to red black tree(set) then it is o(1), therefore it is faster than pq.pop()
    for(auto it : adj[node]){
        int ad = it.first, wt = it.second; //assuming adj is a vector of pair with element as first and weight as second
        if(dist[ad] > dist[x] + wt){
            s.erase({dist[ad], ad});    //might be optional, can remove but will require another if checking if curDist > dist[node]
            dist[ad] = dist[ad] + wt;
            s.insert({dist[ad], ad});
        }
    }
}
typical questions has multiple states in djikstra(refer algo_mashup g)
so make multiple dimension dist array

recursive lambda function

std::function<int(int, int)> sum;

sum = [term, next, &sum](int a, int b) -> int {
    if (a > b)
        return 0;
    else
        return term(a) + sum(next(a), b);
};

function<void(int)> dfs = [&](int t)->void{
        // dbg(t);
        marked[t] = 1;
        curr.pb(t);
        for(auto it: adj[t]){
            if(!marked[it]) dfs(it);
        }
    };

iota: used to fill a range of elements with increasing values starting from the given initial value
iota(v.begin(), v.end(), 1)
only works for those STL containers that support random access using index numbers such as vector, dequeu, etc.

knapsack dp: 0/1 choose not choose
// Build table dp[][] in bottom-up manner, (n*w) space
for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= W; j++) {
        // If there is no item or the knapsack's capacity is 0, dp[i][j] = 0 if i = 0 or j = 0
        int pick = 0;
        // Pick ith item if it does not exceed the capacity of knapsack
        if(wt[i - 1] <= j)
            pick = val[i - 1] + dp[i - 1][j - wt[i - 1]];
        // Don't pick the ith item
        int notPick = dp[i - 1][j];
        dp[i][j] = max(pick, notPick);
    }
}
return dp[n][W];

// Taking first i elements, o(n*w) time but o(w) space
for (int i = 1; i <= wt.size(); i++) {
    // Starting from back, so that we also have data of previous computation of i-1 items
    for (int j = W; j >= wt[i - 1]; j--) {
        dp[j] = max(dp[j], dp[j - wt[i - 1]] + val[i - 1]);
    }
}
return dp[W];

detecting cycles in undirected graph:
bfs, dfs

lower_bound(all(vector), val): returns iterator of element with value not less than val, returns equal val

meet in the middle
o(2^n/2)*log(2^n/2) = o(n*2^n/2)
3 steps: 1. partition the array into two
2. find the sum(or other variable) from all subsets of n/2 -> 2^n/2
can do this by bitmask or dfs(recursion with choose not choose)
3. binary search on the 2^n/2 to make it log